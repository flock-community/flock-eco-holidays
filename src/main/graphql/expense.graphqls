
interface Expense {
    id:ID!
    personCode: UUID!
    description: String!
    date: Date!
    status: Status!
}

type CostExpense implements Expense{
    id:ID!
    personCode: UUID!
    description: String!
    date: Date!
    status: Status!
    amount: Float!
    files: [CostExpenseFile!]!
}

type CostExpenseFile {
    name:String!
    file: UUID!
}

type TravelExpense implements Expense{
    id:ID!
    personCode: UUID!
    description: String!
    date: Date!
    status: Status!
    distance: Float!
    allowance: Float!
}

input CostExpenseInput {
    personCode: UUID!
    description: String!
    date: Date!
    status: Status!
    amount: Float!
    files: [CostExpenseFileInput!]!
}

input CostExpenseFileInput {
    name:String!
    file: UUID!
}

input TravelExpenseInput {
    personCode: UUID!
    description: String!
    date: Date!
    status: Status!
    distance: Float!
    allowance: Float!
}

scalar Date
scalar UUID
scalar Status

